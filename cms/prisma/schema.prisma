// Prisma schema for NextCMS
// Defines basic CMS models similar to Strapi

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  username  String    @unique
  password  String
  role      Role?     @relation(fields: [roleId], references: [id])
  roleId    Int?
  posts     Post[]
  accounts  Account[]
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  users       User[]
  permissions RolePermission[]
}

model Resource {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  permissions Permission[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  action      String
  resource    Resource   @relation(fields: [resourceId], references: [id])
  resourceId  Int
  description String?
  roles       RolePermission[]
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@id([roleId, permissionId])
}

model Post {
  id          Int            @id @default(autoincrement())
  title       String
  content     String?
  author      User           @relation(fields: [authorId], references: [id])
  authorId    Int
  categories  PostCategory[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Category {
  id        Int            @id @default(autoincrement())
  name      String
  slug      String         @unique
  posts     PostCategory[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model PostCategory {
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([postId, categoryId])
}

model Media {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Dynamic content types used by the dashboard
model CollectionType {
  id      Int      @id @default(autoincrement())
  name    String
  slug    String   @unique
  fields  Json
  entries CollectionEntry[]
}

model CollectionEntry {
  id        Int            @id @default(autoincrement())
  data      Json
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  type      CollectionType @relation(fields: [typeId], references: [id])
  typeId    Int
}

model SingleType {
  id    Int     @id @default(autoincrement())
  name  String
  slug  String  @unique
  fields Json
  entry  SingleEntry?
}

model SingleEntry {
  id        Int        @id @default(autoincrement())
  data      Json
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  type      SingleType @relation(fields: [typeId], references: [id])
  typeId    Int @unique
}

model Component {
  id     Int    @id @default(autoincrement())
  name   String
  slug   String @unique
  fields Json
}

model ContentType {
  id     Int          @id @default(autoincrement())
  name   String       @unique
  fields Json
  items  ContentItem[]
}

model ContentItem {
  id        Int         @id @default(autoincrement())
  data      Json
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  type      ContentType @relation(fields: [typeId], references: [id])
  typeId    Int
}

/// NextAuth models
model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
